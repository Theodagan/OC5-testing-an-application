name: E2E Tests (Angular + Spring + Cypress)

on:
  workflow_dispatch:
    inputs:
      use-cloud:
        description: "Record to Cypress Cloud?"
        required: false
        default: "false"
        type: choice
        options: ["true", "false"]
      generate-coverage:
        description: "Generate code coverage report?"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: yoga
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Cache Angular node_modules
        uses: actions/cache@v3
        with:
          path: front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ‚òï Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: üì• Try download Spring Boot JAR
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-jar
          path: back/target

      - name: üì¶ Install & Build Angular
        working-directory: front
        run: |
          npm ci
          npx ng build

      - name: ‚òï Build Spring Boot JAR (if not downloaded)
        if: steps.spring-boot-jar.outputs.download-path == ''
        working-directory: back
        run: mvn clean install -DskipTests

      - name: ‚¨ÜÔ∏è Upload Spring Boot JAR
        if: steps.spring-boot-jar.outputs.download-path == ''
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: back/target/*.jar

      - name: üöÄ Start Spring Boot API
        run: |
          nohup java -jar back/target/*.jar \
            --spring.datasource.url=jdbc:mysql://localhost:3306/yoga \
            --spring.datasource.username=root \
            --spring.datasource.password=root &
          sleep 10

      - name: üöÄ Serve Angular App (ng serve)
        working-directory: front
        run: |
          npm install -g @angular/cli
          ng serve --host 0.0.0.0 --port 4200 &
          sleep 15

      - name: ‚úÖ Run Cypress tests and save results
        working-directory: front
        run: |
          npm run e2e:report

      - name: üìä Generate code coverage report (optional)
        if: ${{ github.event.inputs.generate-coverage == 'true' }}
        working-directory: front
        run: |
          npm run e2e:coverage > coverage-output.txt

      - name: üì§ Upload HTML coverage report (optional)
        if: ${{ github.event.inputs.generate-coverage == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-coverage
          path: front/coverage/

      - name: üîí Enforce minimum coverage threshold
        if: ${{ github.event.inputs.generate-coverage == 'true' }}
        working-directory: front
        run: |
          npx nyc check-coverage --lines 80 --functions 80 --branches 70 --statements 80
        continue-on-error: true

      - name: üìù Add Cypress + Coverage Summary
        working-directory: front
        run: |
          PASSED=$(jq '.stats.passes' results.json)
          FAILED=$(jq '.stats.failures' results.json)
          PENDING=$(jq '.stats.pending' results.json)
          SKIPPED=$(jq '.stats.skipped // 0' results.json)
          DURATION_MS=$(jq '.stats.duration' results.json)
          DURATION_SEC=$(echo "scale=2; $DURATION_MS / 1000" | bc)

          echo "## ‚úÖ R√©sum√© du job E2E" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "<h2>üß™ Cypress Results</h2>" >> $GITHUB_STEP_SUMMARY
          echo "<table>" >> $GITHUB_STEP_SUMMARY
          echo "<tr><th>Status</th><th>Passed ‚úÖ</th><th>Failed ‚ùå</th><th>Pending ‚úã</th><th>Skipped ‚è≠Ô∏è</th><th>Duration ‚è±Ô∏è</th></tr>" >> $GITHUB_STEP_SUMMARY
          echo "<tr><td>R√©sultat</td><td>$PASSED</td><td>$FAILED</td><td>$PENDING</td><td>$SKIPPED</td><td>${DURATION_SEC}s</td></tr>" >> $GITHUB_STEP_SUMMARY
          echo "</table>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.generate-coverage }}" = "true" ]; then
            echo "## üìä Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat coverage-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            if grep -q "100%.*Statements" coverage-output.txt; then
              echo "‚úÖ Couverture OK" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Couverture partielle ‚Äì seuil non atteint" >> $GITHUB_STEP_SUMMARY
            fi
          fi